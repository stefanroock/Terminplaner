<?xml version="1.0"?>
<!-- ====================================================================== 
     17.05.2006 

     TDD-Terminplaner    
     Beispielprojekt "Terminplaner", dass Test-Driven-Development (TDD)
     demonstriert.
     ====================================================================== -->
<project name="TDD-Terminplaner" default="coverage">
	<description>
            Build-Skript f√ºr das Beispielprojekt "TDD-Terminplaner".
    </description>

	<property name="src.dir" value="${basedir}/src" />
	<property name="bin.dir" value="${basedir}/bin" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="cobertura.dir" value="${basedir}/cobertura-1.8" />
	<property name="instrumented.dir" value="${basedir}/bin-instrumented" />
	<property name="reports.dir" value="${basedir}/test-reports" />
	<property name="reports.xml.dir" value="${reports.dir}/test/xml" />
	<property name="reports.html.dir" value="${reports.dir}/test/html" />
	<property name="coverage.xml.dir" value="${reports.dir}/coverage/xml" />
	<property name="coverage.html.dir" value="${reports.dir}/coverage/html" />

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<target name="init">
		<mkdir dir="${instrumented.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
		<mkdir dir="${coverage.xml.dir}" />
		<mkdir dir="${coverage.html.dir}" />
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" destdir="${bin.dir}" debug="yes">
			<classpath refid="cobertura.classpath" />
		</javac>
	</target>

	<target name="instrument" depends="init,compile">
		<!--
				Remove the coverage data file and any old instrumentation.
			-->
		<delete file="cobertura.ser" />
		<delete dir="${instrumented.dir}" />

		<!--
				Instrument the application classes, writing the
				instrumented classes into ${build.instrumented.dir}.
			-->
		<cobertura-instrument todir="${instrumented.dir}">
			<!--
					The following line causes instrument to ignore any
					source line containing a reference to log4j, for the
					purposes of coverage reporting.
				-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${bin.dir}">
				<!--
						Instrument all the application classes, but
						don't instrument the test classes.
					-->
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="test" depends="init,compile">
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
			<!--
					Note the classpath order: instrumented classes are before the
					original (uninstrumented) classes.  This is important.
				-->
			<classpath location="${instrumented.dir}" />
			<classpath location="${bin.dir}" />

			<!--
					The instrumented classes reference classes used by the
					Cobertura runtime, so Cobertura and its dependencies
					must be on your classpath.
				-->
			<classpath refid="cobertura.classpath" />

			<formatter type="xml" />
			<test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
			<batchtest todir="${reports.xml.dir}" unless="testcase">
				<fileset dir="${src.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>
	</target>

	<target name="coverage-check">
		<cobertura-check branchrate="34" totallinerate="100" />
	</target>

	<target name="coverage-report">
		<!--
				Generate an XML file containing the coverage data using
				the "srcdir" attribute.
			-->
		<cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
	</target>

	<target name="alternate-coverage-report">
		<!--
				Generate a series of HTML files containing the coverage
				data in a user-readable form using nested source filesets.
			-->
		<cobertura-report destdir="${coverage.html.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>

	<target name="clean" description="Remove all files created by the build/test process.">
		<delete dir="${instrumented.dir}" />
		<delete dir="${reports.dir}" />
		<delete file="cobertura.log" />
		<delete file="cobertura.ser" />
	</target>

	<target name="coverage" depends="compile,instrument,test,coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports." />

</project>

